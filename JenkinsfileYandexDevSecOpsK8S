pipeline {
    agent any

    tools {
        nodejs 'node14'
    }

    environment {
        SCANNER_HOME =  tool 'sonar-scanner'
        DOCKER_ID = credentials('DOCKER_ID')
        DOCKER_PASSWORD = credentials('DOCKER_PASSWORD')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        RELEASE = "1.0.0"
        IMAGE_TAG = "${BUILD_NUMBER}"
        CR_REGISTRY = "cr.yandex/crpn9ikb6hp5v19o9957"
        CR_REPOSITORY = "inf-frontend-dev"
        IMAGE_NAME = "${CR_REGISTRY}" + "/" + "${CR_REPOSITORY}"
        CI_PROJECT_NAME =  "/HelmCharts"

    }



    stages {
        stage("Cleanup Workspace"){
            steps {
                cleanWs()
            }

        }
    
        stage("Checkout from SCM"){
            steps {
                git branch: 'main', credentialsId: 'jenkins-github', url: 'git@github.com:jakkaru-devops/inf-frontend-dev.git'
            }
        }

        
        stage('Pre-build Secret Detection Frontend Project') {
            steps {
                sh "sudo trufflehog --json git https://github.com/jakkaru-devops/inf-frontend-dev.git"
                // script {
                //     def result = sh(returnStdout: true, script: 'sudo trufflehog --json  git https://github.com/jakkaru-devops/inf-frontend-dev.git').trim()
                //     if (result != '') {
                //         error("TruffleHog found secrets: ${result}")
                //     }
                // }
            }
        }


        stage('Pre-build SAST SonarQube Scaning Frontend Project Code') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh "$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=INF-FRONTEND -Dsonar.projectName=INF-FRONTEND"
                }
            }
        }

        stage('Pre-build SAST SonarQube Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'SONAR_TOKEN' 
                }
            } 
        }

        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }


         stage('Pre-build Source SCA Trivy DC Scaning Frontend Project') {
            steps {
                sh "trivy fs --format table -o fs-report.html ."
            }
        }


        stage('Pre-build Source SCA Trivy DC отчёт') {
            steps {
                sh "cat fs-report.html"
            }
        }


        stage('Docker login') {
             steps {
                 echo 'Initializing..'
                 echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
                 echo "Current branch: ${env.BRANCH_NAME}"
                 sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_ID --password-stdin cr.yandex'

             }
         }

        stage('Build Docker Image Frontend Project') {
            steps {
                echo 'Building image..'
                sh "docker build -t $IMAGE_NAME:$IMAGE_TAG ."
            }
        }


        stage('Post-build Binary SCA Trivy Image Scane Frontend Project') {
            steps {
                sh "trivy image --format table -o image-report.html --timeout 20m  --scanners vuln $IMAGE_NAME:$IMAGE_TAG"
            }
        }
        
        
        stage('Post-build Binary SCA Trivy Image отчёт ') {
            steps {
                sh "cat image-report.html"
            }
        }


        stage('Publish Docker Image to Yandex Cloud') {
            steps {
                echo 'Publishing image to YandexCloud..'
                sh "docker push $IMAGE_NAME:$IMAGE_TAG"
            }
        }


        
        stage('Cleanup Docker Image') {
            steps {
                sh "sudo docker rmi $IMAGE_NAME:$IMAGE_TAG "    
            }
        }   

    //     stage("Checkout from SCM Helm Chart"){
    //         steps {
    //             echo 'Checkout from SCM Helm Chart..'
    //             git branch: 'main', credentialsId: 'jenkins-github', url: 'https://github.com/jakkaru-devops/inf-helm.git'
    //         }
    //     }

    //     stage('List derictory frontend') {
    //         steps {
    //             sh "ls -la"
    //         }
    //     } 
           

    //     stage('Configure Git') {
    //         steps {
    //             sh 'git config --global user.email "savamedvedevvv@gmail.com"'
    //             sh 'git config --global user.name "jakkaru-devops"'
    //             sh 'git config --list --show-origin'
    //             sh 'git config --global push.autoSetupRemote true'
    //         }
    //     }

    //    stage('Update helm chart values version frontend ') {
    //         steps {
    //             dir('Production') {
    //                 sh 'echo "Current directory: $(pwd)"'
    //                 sh 'ls -la'
    //                 sh "yq -i '.app.version =\"${IMAGE_TAG}\"' values.yaml"
    //                 sh "git add values.yaml"
    //                 sh "git commit -m 'CI: Update app version to ${IMAGE_TAG}'"
    //                 sh 'git branch --set-upstream-to origin/main main'
    //                 sh 'git config --global credential.helper store'
    //                 sh 'echo "https://${jakkaru-devops}:${GITHUB_TOKEN}@github.com" > ~/.git-credentials'
    //                 sh 'git push  origin main'
    //             }
    //         }
    //     }

    //     stage('List derictory Helm ') {
    //         steps {
    //             sh "ls -la"
    //         }
    //     } 

    //     stage('Deploy To Kubernetes Helm Chart inf-project') {
    //         steps {
    //            withKubeConfig(caCertificate: '', clusterName: 'yc-managed-k8s-cat8eh5c4jffsphve4n6', contextName: '', credentialsId: 'K8S_CRED', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://158.160.104.216') {
    //                     sh "helm upgrade --install inf-project ./Production/ -n webapps"

    //             }
    //         }
    //     }


    //     stage('Kubernetes List Test') {
    //         steps {
    //             withKubeConfig(caCertificate: '', clusterName: 'yc-managed-k8s-cat8eh5c4jffsphve4n6', contextName: '', credentialsId: 'K8S_CRED', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://158.160.104.216') {
    //                 sh "kubectl get pods -n webapps"
    //             }
    //         }
    //     } 
        
    }
}
